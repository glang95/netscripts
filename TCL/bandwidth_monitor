TCL L3 Switch interface query sent to Linux machine directory picked up by a Python script to create a graphical output of the bandwidth utilization

== Cisco TCL continuous rate query ==

* input 1:
<pre>
proc int_rate {x} {
 for {set n 1} {$n<=$x} {incr n 0} {
    exec "show interface e1/$n | i rate"
 }
}
</pre>

*input 2:
<pre>
int_rate 1
</pre>

Output:
<pre>
SWITCH-tcl# int_rate 1
  30 seconds input rate 648 bits/sec, 0 packets/sec
  30 seconds output rate 648 bits/sec, 0 packets/sec
    input rate 648 bps, 0 pps; output rate 632 bps, 0 pps

  30 seconds input rate 648 bits/sec, 0 packets/sec
  30 seconds output rate 648 bits/sec, 0 packets/sec
    input rate 648 bps, 0 pps; output rate 632 bps, 0 pps

  30 seconds input rate 648 bits/sec, 0 packets/sec
  30 seconds output rate 648 bits/sec, 0 packets/sec
    input rate 648 bps, 0 pps; output rate 632 bps, 0 pps

  30 seconds input rate 648 bits/sec, 0 packets/sec
  30 seconds output rate 648 bits/sec, 0 packets/sec
    input rate 648 bps, 0 pps; output rate 632 bps, 0 pps

  30 seconds input rate 648 bits/sec, 0 packets/sec
  30 seconds output rate 648 bits/sec, 0 packets/sec
    input rate 648 bps, 0 pps; output rate 632 bps, 0 pps
.....
escape to stop loop
</pre>

== Do the same but send the output to the bootflash ==


Input 1:
<pre>
proc int_rate {x} {
 for {set n 1} {$n<=$x} {incr n 0} {
    exec "show interface e1/$n | i rate >> bootflash:testing"
 }
}
</pre>

*input 2:
<pre>
int_rate 1
</pre>

'''Do not forget to escape or bootflash storage will be exhausted eventually'''



== Output with timestamp with nexus grep/cut syntax ==

*input
<pre>
proc int_rate {x} {
 for {set n 40} {$n<=$x} {incr n 0} {
exec "show clock"
exec "sh int e1/$n | b 'Load' | end RX | exclude Load | exclude RX | human | cut -b 15-26"
}
}
</pre>

*output

<pre>
L3Switch1# int_rate 40
01:19:45.137 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:45.404 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:45.693 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:45.983 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:46.274 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:46.635 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:46.925 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:47.209 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:47.502 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:47.785 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:48.068 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:48.352 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:48.636 UTC Thu Dec 21 2017

 157.50 Mbps

01:19:48.924 UTC Thu Dec 21 2017

 178.15 Mbps
</pre>

== Clean Nexus cut -f with input traffic field output ==

* '''Instead of cutting sections of the output which could result in errors or missing/additional unwanted data, the following script uses the NXOS line that will still use the cut command but will output specific fields (cut -f)'''
<pre>
 proc int_rate {x} {
 for {set n 7} {$n<=$x} {incr n 0} {
 exec "show clock"
 exec "sh int e1/$n | i rate | grep 'pps' | cut -d ' ' -f 7,8"
}
}
 
 int_rate 7
</pre>

<pre>
16:46:43.504 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.572 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.641 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.709 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.780 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.847 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.915 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:43.983 UTC Mon Mar 12 2018

340.78 Kbps,

16:46:44.051 UTC Mon Mar 12 2018

340.78 Kbps,

</pre>

== Python bandwidth graph ==

'''The following python script will pull the info and create a graph (the router output is in the file named bwidth.txt):'''

 

<pre>

#!/usr/bin/python
# author=TJ Andrzejewski 
from itertools import izip_longest
from datetime import datetime
import matplotlib.pyplot as plt


# Define function to group lines together
#       Taken from https://docs.python.org/2/library/itertools.html#recipes
def grouper(iterable, n, fillvalue=None):
        args = [iter(iterable)] * n
        return izip_longest(*args, fillvalue=fillvalue)

#       Define two empty lists
dates = []
values = []

with open('bwidth.txt') as f:
        for lines in grouper(f, 4, ''):
                assert len(lines) == 4 # Verify that we have 4 lines exit if we don't
                date = datetime.strptime(lines[0].strip().split()[3] + " " + lines[0].strip().split()[4] + " " +  lines[0].strip().split()[5] + " " + lines[0].strip().split()[0], '%b %d %Y %H:%M:%S.%f')
                value = lines[2].strip()
                if date and value: #Only care about entries with both a date and value
                        dates.append(date)
                        values.append(value.split()[0])

#       PLOTTING THE DATES AND THE VALUES
fig = plt.figure(figsize=(25,15))
plt.plot(dates, values)
fig.suptitle('Transfer Rate', fontsize=20)
plt.xlabel('Datetime (in UTC)', fontsize=16)
plt.ylabel('Rate (in Mbps)', fontsize=16)
plt.grid()
fig.savefig('rate.png')

</pre>



